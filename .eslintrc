{
  // I want to use babel-eslint for parsing!
    "parser" : "babel-eslint",
    "plugins": ["react"],
    "env" : {
        // I write for browser
        "browser" : true,
        // in CommonJS
        "node" : true
    },
    "ecmaFeatures": {
        "arrowFunctions": true,
        "blockBindings": true,
        "classes": true,
        "defaultParams": true,
        "destructuring": true,
        "forOf": true,
        "generators": false,
        "modules": true,
        "objectLiteralComputedProperties": true,
        "objectLiteralDuplicateProperties": false,
        "objectLiteralShorthandMethods": true,
        "objectLiteralShorthandProperties": true,
        "spread": true,
        "superInFunctions": true,
        "templateStrings": true,
        "jsx": true
    },
    "rules": {
        "quotes": "single",
        "no-multi-spaces": false,
        "react/display-name": 0,
        "react/jsx-boolean-value": 2,
        "react/jsx-quotes": [2, "double"],
        "react/jsx-no-undef": 2,
        "react/jsx-sort-props": 0,
        "react/jsx-sort-prop-types": 0,
        "react/jsx-uses-react": 2,
        "react/jsx-uses-vars": 2,
        "react/no-did-mount-set-state": [2, "allow-in-func"],
        "react/no-did-update-set-state": 2,
        "react/no-multi-comp": 2,
        "react/no-unknown-property": 2,
        "react/prop-types": 2,
        "react/react-in-jsx-scope": 2,
        "react/self-closing-comp": 2,
        "react/wrap-multilines": 2,
        "react/sort-comp": [2, {
          "order": [
            "displayName",
            "propTypes",
            "contextTypes",
            "childContextTypes",
            "mixins",
            "statics",
            "defaultProps",
            "getDefaultProps",
            "getInitialState",
            "getChildContext",
            "componentWillMount",
            "componentDidMount",
            "componentWillReceiveProps",
            "shouldComponentUpdate",
            "componentWillUpdate",
            "componentDidUpdate",
            "componentWillUnmount",
            "/^on.+$/",
            "/^get.+$/",
            "/^render.+$/",
            "render"
          ]
        }]
    }

}
